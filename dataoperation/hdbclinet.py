from hdbcli import dbapi
import numpy as np
from dotenv import load_dotenv
import os


def get_connection():
    """
    Establishes a connection to an SAP HANA database.

    Returns:
        Connection: Connection object to the SAP HANA database.
    """
    load_dotenv()
    try:
        cc = dbapi.connect(
            address=os.getenv('HANA_ADDRESS'),
            port=os.getenv('HANA_PORT'),
            user=os.getenv('HANA_USER'),
            password=os.getenv('HANA_PASSWORD'),
            encrypt=True
        )
        return cc
    except Exception as e:
        print(f"Error connecting to SAP HANA database: {e}")


def create_table_if_not_exist(cc):
    """
    Creates a table in the SAP HANA database if it does not already exist.

    Args:
        cc (Connection): Connection object to the SAP HANA database.
    """
    load_dotenv()
    table_name = os.getenv('TABLE_NAME')
    try:
        cursor = cc.cursor()
        # Check if the table already exists
        cursor.execute(f"SELECT TABLE_NAME FROM TABLES WHERE TABLE_NAME = '{table_name}'")
        result = cursor.fetchone()

        if not result:
            # Create the table if it does not exist
            sql_command = f'''
            CREATE TABLE {table_name} (
                ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                INDEX_ID BIGINT,
                FILE_NAME NVARCHAR(500),
                PAGE_NUMBER NVARCHAR(5),
                TEXT NCLOB,
                VECTOR_STR REAL_VECTOR(384)
            )
            '''
            cursor.execute(sql_command)
        cursor.close()
    except Exception as e:
        print(f"Error creating table {table_name}: {e}")


def insert_data(cc, document_to_index):
    cursor = cc.cursor()
    load_dotenv()
    table_name = os.getenv('TABLE_NAME')
    for doc in document_to_index:
        try:
            vector_array = np.array(doc[4], dtype=np.float32)  # Ensure correct data type

            sql_command = f'''
                INSERT INTO {table_name} (INDEX_ID, FILE_NAME, PAGE_NUMBER, TEXT, VECTOR_STR) 
                VALUES (?, ?, ?, ?, ?)
            '''

            data_tuple = (
                int(doc[0]),  # INDEX_ID (BIGINT)
                str(doc[1]),  # FILE_NAME (NVARCHAR)
                str(doc[2]),  # PAGE_NUMBER (NVARCHAR)
                str(doc[3]),  # TEXT (NCLOB)
                vector_array.tolist()  # VECTOR_STR (REAL_VECTOR), no quotes
            )
            cursor.execute(sql_command, data_tuple)
        except Exception as e:
            print(f"Error inserting data: {e}")
    cursor.close()

def clear_indexes():
    """
    Clears all the indexes stored in the SAP HANA database.
    """
    load_dotenv()
    table_name = os.getenv('TABLE_NAME')
    cc = get_connection()
    try:
        cursor = cc.cursor()
        cursor.execute(f"DELETE FROM {table_name} where 1=1")
        cursor.close()
        close_connection(cc)
    except Exception as e:
        print(f"Error clearing indexes: {e}")


def close_connection(cc):
    """
    Closes the connection to the SAP HANA database.

    Args:
        cc (Connection): Connection object to the SAP HANA database.
    """
    try:
        cc.close()
    except Exception as e:
        print(f"Error closing connection: {e}")


def run_vector_search(query_vector, metric="COSINE_SIMILARITY", k=4):
    """
    Performs vector search on indexed documents.
    """
    load_dotenv()
    table_name = os.getenv('TABLE_NAME')
    try:
        if not query_vector:
            raise ValueError("No query embedding vector passed.")
        cc = get_connection()
        cursor = cc.cursor()

        sort_order = "DESC" if metric != "L2DISTANCE" else "ASC"
        sql_query = f"""
        SELECT TOP {k} ID, INDEX_ID, PAGE_NUMBER, FILE_NAME, TEXT
        FROM {table_name}
        ORDER BY {metric}(VECTOR_STR, TO_REAL_VECTOR('{query_vector}')) {sort_order}
        """
        cursor.execute(sql_query)
        return cursor.fetchall()
    except Exception as e:
        print(f"Error during vector search: {e}")
        return []


def check_if_documents_exist():
    """
    Checks if documents are already indexed in the SAP HANA database.

    Returns:
        bool: True if documents exist, False otherwise.
    """
    load_dotenv()
    table_name = os.getenv('TABLE_NAME')
    cc = get_connection()
    try:
        cursor = cc.cursor()
        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        result = cursor.fetchone()
        cursor.close()
        return result[0] > 0
    except Exception as e:
        print(f"Error checking if documents exist: {e}")
        return False


def store_embeddings_to_db(document_to_index):
    # Establish a connection to the SAP HANA database
    cc = get_connection()

    # Create a table in the SAP HANA database
    create_table_if_not_exist(cc)

    # Insert data into the table
    insert_data(cc, document_to_index)
